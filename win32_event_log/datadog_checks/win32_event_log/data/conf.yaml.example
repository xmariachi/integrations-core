init_config:

  ## @param tag_event_id - boolean - optional - default: false
  ## The `tag_event_id` setting adds an event id tag to each
  ## event sent from this check.
  #
  # tag_event_id: false

  ## @param default_event_priority - string - optional - default: normal
  ## Set priority level in event stream for all events created by integration
  ## Options available are 'low' or 'normal'.
  #
  # default_event_priority: normal

instances:

  -

    ## @param path - string - optional
    ## The check will subscribe to the path for events. It can be one of the following:
    ##
    ##   - the name of an Admin or Operational channel (you cannot subscribe to Analytic or Debug channels)
    ##   - the full path to a log file, usually ending in .evt, .evtx, or .etl
    ##
    ## The path is required if `legacy_mode` is set to `false`.
    #
    # path: <PATH>

    ## @param query - string - optional
    ## The raw XPath or structured XML query used to filter events.
    ##
    ##   /\ WARNING /\
    ##   Queries translate to XML and therefore are case-sensitive.
    ##
    ## For detailed documentation, see the following resources:
    ##
    ##   - Examples > https://docs.microsoft.com/en-us/windows/win32/wes/consuming-events
    ##   - Query Schema > https://docs.microsoft.com/en-us/windows/win32/wes/queryschema-schema
    ##   - Event Schema > https://docs.microsoft.com/en-us/windows/win32/wes/eventschema-schema
    ##
    ## This overrides any selected `filters`.
    #
    # query: <QUERY>

    ## @param filters - mapping - optional
    ## A mapping of node paths to allowed values. Every filter (equivalent to the `and` operator) must
    ## match any value (equivalent to the `or` operator).
    ##
    ##   /\ WARNING /\
    ##   The node paths refer to XML elements and therefore are case-sensitive.
    ##
    ## For example, if you defined the following filters:
    ##
    ##   System.Level:
    ##     - 1
    ##     - 2
    ##   UserData/LowOnMemory:
    ##   System.EventID:
    ##     - 4624
    ##   EventData.Data.@Name='TargetUserName':
    ##     - Picard
    ##
    ## then the resulting XPath query would be:
    ##
    ##   *[
    ##     System[(Level=1 or Level=2) and (EventID=4624)]
    ##     and UserData/LowOnMemory
    ##     and EventData[Data[@Name='TargetUserName']='Picard']
    ##    ]
    ##
    ## Notes:
    ##
    ##   1. You can select elements by themselves without values by excluding them (as the
    ##      `UserData/LowOnMemory` example above shows) or setting them to an empty array.
    ##   2. Node paths ending with an attribute condition can only have one value.
    ##
    ## For advanced and more granular filtering, define a `query`.
    ##
    ## If `filters` nor `query` is specified, then all events from the subscribed `path` will be collected.
    #
    # filters: <FILTERS>

    ## @param auth_type - string - optional - default: default
    ## The type of authentication to use. The available types are:
    ##
    ##   - default
    ##   - negotiate
    ##   - kerberos
    ##   - ntlm
    #
    # auth_type: default

    ## @param server - string - optional - default: localhost
    ## The name of the remote computer to connect to.
    ##
    ## If this is not selected or set to `localhost`, a connection to the
    ## local machine will be established instead.
    #
    # server: localhost

    ## @param user - string - optional
    ## The user name to use to connect to the remote computer.
    ##
    ## If this, `password`, and `domain` are all unselected, then the credentials
    ## of the current user will be used.
    #
    # user: <USER>

    ## @param password - string - optional
    ## The password for the user account.
    ##
    ## If this, `user`, and `domain` are all unselected, then the credentials
    ## of the current user will be used.
    #
    # password: <PASSWORD>

    ## @param domain - string - optional
    ## The domain to which the user account belongs.
    ##
    ## If this, `user`, and `password` are all unselected, then the credentials
    ## of the current user will be used.
    #
    # domain: <DOMAIN>

    ## @param timeout - number - optional - default: 5
    ## The number of seconds to wait for new event signals.
    #
    # timeout: 5

    ## @param payload_size - number - optional - default: 10
    ## The number of events to request at a time.
    ##
    ## This is useful when connecting to remote machines with the `server` option.
    #
    # payload_size: 10

    ## @param legacy_mode - number - optional - default: true
    ## Whether or not to use a mode of operation that is compatible with Windows versions older than Vista.
    ##
    ##   /\ WARNING /\
    ##   This mode, by nature of the underlying technology, is significantly more resource intensive.
    ##
    ## Support for such versions, and subsequently this option, will eventually be deprecated.
    #
    # legacy_mode: true

    ## @param host - string - optional - default: localhost
    ## By default, the local machine's event logs are captured. To capture a remote
    ## machine's event logs, specify the machine name (DCOM has to be enabled on
    ## the remote machine).
    #
    # host: <REMOTE_HOSNAME>

    ## @param username - string - optional
    ## If authentication is needed, specify a `username` here.
    #
    # username: <USERNAME>

    ## @param event_priority - string - optional - default: normal
    ## Override default event priority by setting it per instance
    ## Available values are: `normal` and `low`
    #
    # event_priority: normal

    ## FILTERS
    ## At least one filter is required:
    ## `log_file`, `source_name`, `type`, `event_id`, `message_filters`

    ## @param log_file - list of strings - optional
    ## The `log_file` filter instructs the check to only capture events
    ## that belong to one of the specified LogFiles (Application, System, Setup, Security,
    ## or application-specific LogFile).
    #
    # log_file:
    #   - <LOG_FILE>

    ## @param source_name - list of strings - optional
    ## The `source_name` filter instructs the check to only capture events
    ## that come from one of the specified SourceNames.
    #
    # source_name:
    #   - <SOURCE_NAME>

    ## @param type - list of strings - optional - default: information
    ## The `type` filter instructs the check to only capture events
    ## that have one of the specified Types.
    ## Standard values are: Critical, Error, Warning, Information, Audit Success, Audit Failure.
    #
    # type:
    #   - information

    ## @param event_id - list of strings - optional
    ## The `event_id` filter instructs the check to only capture events
    ## that have one of the specified EventCodes.
    ## The event ID can be found through http://www.eventid.net/ and viewed in the
    ## Windows Event Viewer.
    #
    # event_id:
    #   - <EVENT_ID>

    ## @param message_filters - list of strings - optional
    ## The `message_filters` filter instructs the check to only capture
    ## events which Message field matches all of the specified filters.
    ## Use % as a wildcard. See http://msdn.microsoft.com/en-us/library/aa392263(v=vs.85).aspx
    ## for more on the format for LIKE queries.
    ##
    ## NOTE: Any filter that starts with "-" is NOT a query, e.g.: '-%success%'
    ## searches for events without 'success' in the message.
    #
    # message_filters:
    #   - <MESSAGE_FILTER>

    ## @param event_format - list of strings - optional - default: Message
    ## The `event_format` parameter instructs the check to generate
    ## Datadog's event bodies with the specified list of event properties.
    ## If unspecified, the EventLog's `Message` or `InsertionStrings` are used by default.
    ## Available values are: Logfile, SourceName, EventCode, Message, InsertionStrings, TimeGenerated, Type
    #
    # event_format:
    #   - Message

    ## @param tags - list of key:value elements - optional
    ## List of tags to attach to every metric, event, and service check emitted by this Integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

## Log Section (Available for Agent >=6.0)
##
## type - mandatory - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - mandatory - Set port if type is tcp or udp. Set path if type is file and channel_path if windows_event
## service - mandatory - Name of the service owning the log
## source  - mandatory - Attribute that defines which integration is sending the logs
## tags: - optional - Add tags to each logs collected
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: windows_event
#     channel_path: <CHANNEL_1>
#     source: <CHANNEL_1>
#     service: <SERVICE_NAME>
#
#   - type: windows_event
#     channel_path: <CHANNEL_2>
#     source: <CHANNEL_2>
#     service: <SERVICE_NAME>
